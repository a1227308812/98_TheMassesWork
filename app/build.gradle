apply plugin: 'com.android.application'
apply plugin: 'realm-android'

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion
    defaultConfig {
        applicationId rootProject.ext.android.applicationId
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        //解决
        // Annotation processors must be explicitly declared now.
        // The following dependencies on the compile classpath are found to contain annotation processor.
        // Please add them to the annotationProcessor configuration.
        // - butterknife-compiler-8.4.0.jar 问题
        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath = true
                //Arouter路由配置
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }
        ndk { abiFilters "armeabi", "armeabi-v7a" }

        multiDexEnabled true
        sourceSets {
            main {
                jniLibs.srcDirs = ['libs']
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    //    implementation 'com.android.support:appcompat-v7:27.1.1'
    //    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    //    testImplementation 'junit:junit:4.12'
    //    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    //    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    //ARouter路由
    annotationProcessor rootProject.ext.dependencies.arouter_compiler
    //基础库
    implementation project(':library_base')
    if (!rootProject.ext.isModule.toBoolean()) {
        //更新module
        implementation project(':module_update')
        implementation project(':module_login')
        implementation project(':module_woyaobanshi')
        implementation project(':module_woyaoyuyue')
        implementation project(':module_woyaochaxun')
        implementation project(':module_woyaotousu')
        implementation project(':module_woyaozixun')
        implementation project(':module_me')
    }

}
